name: Build Mod

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Create lib directory and download dependencies
      run: |
        mkdir -p lib

        # Download DubsBadHygiene from GitHub releases
        wget -q https://github.com/Dubwise56/Dubs-Bad-Hygiene/releases/latest/download/DubsBadHygiene.dll -O lib/DubsBadHygiene.dll || echo "Warning: DubsBadHygiene download failed"

    - name: Convert project to SDK-style with RimRef
      run: |
        cd Source/DubsElectrolysis

        # Backup original files
        cp DubsElectrolysis.csproj DubsElectrolysis.csproj.bak

        # Get list of C# source files
        SOURCES=$(find . -name "*.cs" -type f | sed 's|^\./||' | awk '{printf "    <Compile Include=\"%s\" />\n", $0}')

        # Create SDK-style .csproj with RimRef
        cat > DubsElectrolysis.csproj << 'EOF'
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <OutputPath>../../Assemblies/</OutputPath>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <DebugType>none</DebugType>
    <LangVersion>latest</LangVersion>
    <RootNamespace>DubsElectrolysis</RootNamespace>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Krafs.Rimworld.Ref" Version="1.5.4104" />
    <PackageReference Include="Lib.Harmony" Version="2.3.3" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="DubsBadHygiene">
      <HintPath>../../lib/DubsBadHygiene.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>

  <ItemGroup>
EOF
        echo "$SOURCES" >> DubsElectrolysis.csproj
        cat >> DubsElectrolysis.csproj << 'EOF'
  </ItemGroup>
</Project>
EOF

    - name: Restore dependencies
      run: |
        cd Source/DubsElectrolysis
        dotnet restore

    - name: Build
      run: |
        cd Source/DubsElectrolysis
        dotnet build -c Release --no-restore

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: DubsElectrolysis-dll
        path: Assemblies/*.dll
        if-no-files-found: warn

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Assemblies/*.dll
          About/**
          Defs/**
          README.md
          LICENSE
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
